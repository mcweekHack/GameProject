//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @playercon: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @playercon()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""5ee90df9-aff3-42be-a6f3-d3a1432acb95"",
            ""actions"": [
                {
                    ""name"": ""playermove"",
                    ""type"": ""Value"",
                    ""id"": ""8456051e-7b39-4ea9-b500-28a51ae3d95e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""playerFire"",
                    ""type"": ""Button"",
                    ""id"": ""c7411ced-53ad-4c19-92a3-f0b5d3ddb367"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Doge"",
                    ""type"": ""Button"",
                    ""id"": ""8a940f96-d576-4319-92a1-0fef0443b6bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Overdrive"",
                    ""type"": ""Button"",
                    ""id"": ""07b8c7bb-bd0d-4aeb-995f-b9e4c2b5b347"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Crosschair"",
                    ""id"": ""ab1e5897-4f77-443c-8d3a-22638fa34872"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playermove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9779bf0a-4a36-4e7a-ba5a-23dd6b22871f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5b040431-2357-4d68-bc25-3580f9c6765c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""671de877-5860-45ad-8d5f-51e59e9a2e34"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0460b0f7-0f41-476e-a4d4-bf3137b18e57"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""52d63ade-5e10-478e-9ca2-82eff4d7b8be"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""playerFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5b9a885-bfeb-44da-b3e9-4847add28474"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Doge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc08431c-58b9-40f6-b6dd-7173384ba3d2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Overdrive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_playermove = m_player.FindAction("playermove", throwIfNotFound: true);
        m_player_playerFire = m_player.FindAction("playerFire", throwIfNotFound: true);
        m_player_Doge = m_player.FindAction("Doge", throwIfNotFound: true);
        m_player_Overdrive = m_player.FindAction("Overdrive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_player_playermove;
    private readonly InputAction m_player_playerFire;
    private readonly InputAction m_player_Doge;
    private readonly InputAction m_player_Overdrive;
    public struct PlayerActions
    {
        private @playercon m_Wrapper;
        public PlayerActions(@playercon wrapper) { m_Wrapper = wrapper; }
        public InputAction @playermove => m_Wrapper.m_player_playermove;
        public InputAction @playerFire => m_Wrapper.m_player_playerFire;
        public InputAction @Doge => m_Wrapper.m_player_Doge;
        public InputAction @Overdrive => m_Wrapper.m_player_Overdrive;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @playermove.started += instance.OnPlayermove;
            @playermove.performed += instance.OnPlayermove;
            @playermove.canceled += instance.OnPlayermove;
            @playerFire.started += instance.OnPlayerFire;
            @playerFire.performed += instance.OnPlayerFire;
            @playerFire.canceled += instance.OnPlayerFire;
            @Doge.started += instance.OnDoge;
            @Doge.performed += instance.OnDoge;
            @Doge.canceled += instance.OnDoge;
            @Overdrive.started += instance.OnOverdrive;
            @Overdrive.performed += instance.OnOverdrive;
            @Overdrive.canceled += instance.OnOverdrive;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @playermove.started -= instance.OnPlayermove;
            @playermove.performed -= instance.OnPlayermove;
            @playermove.canceled -= instance.OnPlayermove;
            @playerFire.started -= instance.OnPlayerFire;
            @playerFire.performed -= instance.OnPlayerFire;
            @playerFire.canceled -= instance.OnPlayerFire;
            @Doge.started -= instance.OnDoge;
            @Doge.performed -= instance.OnDoge;
            @Doge.canceled -= instance.OnDoge;
            @Overdrive.started -= instance.OnOverdrive;
            @Overdrive.performed -= instance.OnOverdrive;
            @Overdrive.canceled -= instance.OnOverdrive;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnPlayermove(InputAction.CallbackContext context);
        void OnPlayerFire(InputAction.CallbackContext context);
        void OnDoge(InputAction.CallbackContext context);
        void OnOverdrive(InputAction.CallbackContext context);
    }
}
